#!/usr/bin/env ruby

#  Copyright 2020-2021 Couchbase, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

require "bundler/setup"
require "irb"
require "open3"
require "couchbase"

include Couchbase # rubocop:disable Style/MixinUsage for brevity

customer123 = {
  "name" => "Douglas Reynholm",
  "email" => "douglas@reynholmindustries.com",
  "addresses" =>
    {
      "billing" =>
        {
          "line1" => "123 Any Street",
          "line2" => "Anytown",
          "country" => "United Kingdom",
        },
      "delivery" =>
        {
          "line1" => "123 Any Street",
          "line2" => "Anytown",
          "country" => "United Kingdom",
        },
    },
  "purchases" => {
    "complete" => [339, 976, 442, 666],
    "abandoned" => [157, 42, 999],
  },
}

def which(name, extra_locations = [])
  ENV.fetch("PATH", "")
     .split(File::PATH_SEPARATOR)
     .prepend(*extra_locations)
     .select { |path| File.directory?(path) }
     .map { |path| [path, name].join(File::SEPARATOR) + RbConfig::CONFIG["EXEEXT"] }
     .find { |file| File.executable?(file) }
end

def capture_output(*cmd)
  output, _, status = Open3.capture3(*cmd)
  return unless status.success?

  output.strip!
  return if output.empty?

  output
end

def cbdinocluster_connection_string
  cbdinocluster = which("cbdinocluster")
  return unless cbdinocluster

  first_cluster = capture_output(cbdinocluster, "ps")[/([-0-9a-f]+) \[State: ready/i, 1]
  return unless first_cluster

  capture_output(cbdinocluster, "connstr", first_cluster)
end

def cluster
  @cluster ||= begin
    connection_string = ARGV[0] || ENV.fetch("TEST_CONNECTION_STRING", cbdinocluster_connection_string) || "couchbase://localhost"
    username = ARGV[1] || ENV.fetch("TEST_USERNAME", nil) || "Administrator"
    password = ARGV[2] || ENV.fetch("TEST_PASSWORD", nil) || "password"
    Cluster.connect(connection_string, username, password)
  end
end

def shutdown
  return unless @cluster

  @cluster.disconnect
  @cluster = nil
end

at_exit { shutdown }

def default_collection(bucket_name = "default")
  @collections ||= {}
  @collections[bucket_name] ||= cluster.bucket(bucket_name).default_collection
end

alias collection default_collection

# Welcome to IRB with preloaded couchbase SDK (see ./bin/console in the repository)
# We have prepared several methods for your experiments:
#   cluster             # returns connected cluster
#   default_collection  # returns default collection (accept bucket name, defaults to "default")
#   customer123         # returns sample document
binding.irb # rubocop:disable Lint/Debugger start REPL
