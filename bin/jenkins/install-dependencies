#!/usr/bin/env bash

#  Copyright 2020-2021 Couchbase, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

PROJECT_ROOT="$( cd "$(dirname "$0"/../..)" >/dev/null 2>&1 ; pwd -P )"

echo "HOSTNAME=${HOSTNAME}"
echo "NODE_NAME=${NODE_NAME}"
echo "CONTAINER_TAG=${CONTAINER_TAG}"
echo "JENKINS_SLAVE_LABELS=${JENKINS_SLAVE_LABELS}"
echo "NODE_LABELS=${NODE_LABELS}"

set -x
set -e

CB_RUBY_VERSION=${CB_RUBY_VERSION:-2.7}

if [ "$(uname -s)" = "Linux" ]
then
  if [ -f /etc/alpine-release ]
  then
    cat /etc/alpine-release
    sudo /sbin/apk add openssl libcrypto1.1 openssl-dev clang clang-extra-tools curl make bash gcc g++ xz cmake zlib-dev linux-headers
  fi

  if  [ ! -x /usr/local/bin/ruby-install ]
  then
      curl -L -o ruby-install-0.8.1.tar.gz https://github.com/postmodern/ruby-install/archive/v0.8.1.tar.gz
      tar -xzvf ruby-install-0.8.1.tar.gz
      cd ruby-install-0.8.1/
      sudo make install
  fi

  if  [ ! -e /usr/local/share/chruby/chruby.sh ]
  then
      curl -L -o chruby-0.3.9.tar.gz https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz
      tar -xzvf chruby-0.3.9.tar.gz
      cd chruby-0.3.9/
      sudo make install
  fi

  OS_ID=unknown
  OS_VERSION=unknown
  if [ -f /etc/os-release ]
  then
      OS_ID=$(grep -o '^ID=.*' /etc/os-release | sed 's/ID=\|"//g')
      OS_VERSION=$(grep -o '^VERSION_ID=.*' /etc/os-release | sed 's/VERSION_ID=\|"//g')
  fi

  if [ "${OS_ID}" = "amzn" -a "${OS_VERSION}" = "2" ]
  then
    sudo yum erase -y openssl-devel || true
    sudo yum install -y openssl11-static openssl11-devel gcc10 gcc10-c++
    CB_EXTRAS="CC=gcc10-cc CXX=gcc10-c++"
  fi
  if [ "${OS_ID}" = "centos" -a "${OS_VERSION}" = "7" ]
  then
    sudo yum install -y openssl11-static openssl11-devel
    cc_prefix=/opt/rh/devtoolset-9/root
    CB_EXTRAS="CC=${cc_prefix}/bin/gcc CXX=${cc_prefix}/bin/g++"
  fi
  if [ "${OS_ID}" = "ubuntu" -a "${OS_VERSION}" = "20.04" ]
  then
    sudo apt-get update -y
    sudo apt-get install -y libssl-dev \
	    clang clang-format clang-tidy clang-tools libc++-dev libc++abi-dev
  fi
  ruby-install --version
  ruby-install --latest || true
  ruby-install --jobs=6 --no-reinstall ruby ${CB_RUBY_VERSION} -- ${CB_EXTRAS} || \
      ruby-install --jobs=6 --no-reinstall --no-install-deps ruby ${CB_RUBY_VERSION} -- ${CB_EXTRAS}
fi
if [ "$(uname -s)" = "Darwin" ]
then
  sw_vers
  system_profiler SPSoftwareDataType SPHardwareDataType
  xcode-select --print-path

  brew doctor || true
  brew list --versions || true
  if [ "x${CB_RUBY_VERSION}" = "xbrew" ]
  then
      brew install automake bison@2.7 openssl@1.1 readline libyaml gdbm libffi
      brew install ruby-install chruby
      brew install cmake gcc@11
  fi
  cc_prefix=$(brew --prefix gcc@11)
  ${cc_prefix}/bin/gcc-11 -v
  ${cc_prefix}/bin/g++-11 -v
  rm -rf /Users/couchbase/.rubies/
  env
  if [ "x${CB_RUBY_VERSION}" = "xbrew" ]
  then
      brew install ruby
      $(brew --prefix ruby)/bin/ruby --version
  else
      ruby-install --version
      ruby-install --latest || true
      export PATH="$(brew --prefix bison@2.7)/bin:$PATH"
      bison --version
      PATCH=
      if [ "x${CB_RUBY_VERSION}" = "x2.7" -o "x${CB_RUBY_VERSION}" = "x3.0" ]
      then
          PATCH="--patch https://gist.githubusercontent.com/avsej/3cf6e57557ac13100f01cacebec10873/raw/d83398e9ef3c63081d3af1b6cc1c77a68f3bfb65/0001-Revert-merge-revision-s-e033c9d7db02a4e8d2973364ecb4.patch"
      fi
      ruby-install --jobs=6 --no-reinstall --no-install-deps ${PATCH} ruby ${CB_RUBY_VERSION} -- \
      CC="${cc_prefix}/bin/gcc-11" CXX="${cc_prefix}/bin/g++-11" || cat /Users/couchbase/src/ruby-2.7.6/config.log
  fi

  if [ "x${CB_RUBY_VERSION}" = "xbrew" ]
  then
    ruby_prefix="$(brew --prefix ruby)"
    ruby_abi_version=$(${ruby_prefix}/bin/ruby -rrbconfig -e'puts RbConfig::CONFIG["ruby_version"]')
    export PATH="${ruby_prefix}/bin:${HOME}/.gem/ruby/${ruby_abi_version}/bin:$PATH"
    export LDFLAGS="-L${ruby_prefix}/lib"
    export CPPFLAGS="-L${ruby_prefix}/include"
    export PKG_CONFIG_PATH="${ruby_prefix}/lib/pkgconfig"
  else
    source $(brew --prefix chruby)/share/chruby/chruby.sh
  fi
  CB_GEM_INSTALL_OPTIONS=
  if [ "x${CB_RUBY_VERSION}" = "xbrew" ]
  then
    CB_GEM_INSTALL_OPTIONS="--user-install"
  else
    chruby ruby-${CB_RUBY_VERSION}
  fi
  chruby ruby-${CB_RUBY_VERSION}
  which ruby gem bundle
  ruby --version
  bundle --version
  gem env
  export CC="${cc_prefix}/bin/gcc-11"
  export CXX="${cc_prefix}/bin/g++-11"
  gem install ${CB_GEM_INSTALL_OPTIONS} strscan || \
      cat /Users/couchbase/.gem/ruby/2.7.6/extensions/x86_64-darwin-20/2.7.0-static/strscan-3.0.1/mkmf.log \
      /Users/couchbase/.gem/ruby/2.7.6/extensions/x86_64-darwin-20/2.7.0-static/strscan-3.0.1/gem_make.out
fi

if [ "$(uname -s)" = "Linux" ]
then
  if [ -f /etc/alpine-release ]
  then
      cmake --version
  else
      if [ ! -d ${HOME}/.cmake-3.21.2 ]
      then
          machine=$(uname -m)
          curl -L -o cmake-3.21.2-linux-${machine}.tar.gz https://github.com/Kitware/CMake/releases/download/v3.21.2/cmake-3.21.2-linux-${machine}.tar.gz
          tar xvf cmake-3.21.2-linux-${machine}.tar.gz
          mv cmake-3.21.2-linux-${machine} ${HOME}/.cmake-3.21.2
          rm cmake-3.21.2-linux-${machine}.tar.gz
      fi
      ${HOME}/.cmake-3.21.2/bin/cmake --version
  fi
fi
