#!/usr/bin/env bash

#  Copyright 2020-2021 Couchbase, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

PROJECT_ROOT="$( cd "$(dirname "$0"/../..)" >/dev/null 2>&1 ; pwd -P )"

echo "HOSTNAME=${HOSTNAME}"
echo "NODE_NAME=${NODE_NAME}"
echo "CONTAINER_TAG=${CONTAINER_TAG}"
echo "JENKINS_SLAVE_LABELS=${JENKINS_SLAVE_LABELS}"
echo "NODE_LABELS=${NODE_LABELS}"

set -x
set -e

if [ "$(uname -s)" = "Linux" ]
then
  cat /etc/system-release || cat /etc/os-release
fi
if [ "$(uname -s)" = "Darwin" ]
then
  sw_vers
  system_profiler SPSoftwareDataType SPHardwareDataType
  sudo xcode-select --print-path
fi

AUTH="ruby-sdk-${BUILD_NUMBER}@couchbase.com"

cbdyncluster info
cbdyncluster ps -a

CB_VERSION=${CB_VERSION:-6.6.0}
CB_RUBY_VERSION=${CB_RUBY_VERSION:-2.7}

export TEST_DEVELOPER_PREVIEW=$(ruby -e 'puts "yes" if ENV["CB_VERSION"] =~ /^6\.6/')
if [ "x${TEST_DEVELOPER_PREVIEW}" = "xyes" ]
then
  extra_options="--enable-developer-preview"
fi

CLUSTER_ID=$(cbdyncluster allocate --num-nodes=3 --server-version=${CB_VERSION})
SERVICES="kv,index,n1ql,fts"
CB_BUCKET=default
cbdyncluster setup ${CLUSTER_ID} \
    --bucket=${CB_BUCKET} \
    --storage-mode=plasma \
    ${extra_options} \
    --node=${SERVICES} \
    --node=${SERVICES} \
    --node=${SERVICES}
sleep 30
cbdyncluster ps -a

if [ "$(uname -s)" = "Linux" ]
then
  source /usr/local/share/chruby/chruby.sh
fi
if [ "$(uname -s)" = "Darwin" ]
then
  source $(brew --prefix chruby)/share/chruby/chruby.sh
fi
chruby ruby-${CB_RUBY_VERSION}

export GEM_HOME="${PROJECT_ROOT}/vendor/bundle/ruby/$(ruby -rrbconfig -e'puts RbConfig::CONFIG["ruby_version"]')"

CB_CREDS="Administrator:password"

CB_HOST=$(cbdyncluster ips ${CLUSTER_ID} | ruby -e 'puts STDIN.read.split(",")[0]')

# curl -sS -w "\n" -u ${CB_CREDS} -X POST http://${CB_HOST}:8091/pools/default/buckets/${CB_BUCKET} \
#      -d 'flushEnabled=1' \
#      -d 'replicaIndex=1' \
#      -d 'replicaNumber=2'
#
# KNOWN_NODES=$(curl -sS -u ${CB_CREDS} http://${CB_HOST}:8091/pools/default | \
#               ruby -rjson -e 'puts JSON.load(STDIN.read)["nodes"].map {|n| n["otpNode"] }.join(",")')
# curl -sS -u ${CB_CREDS} http://${CB_HOST}:8091/controller/rebalance -d "knownNodes=${KNOWN_NODES}"
#
# STATUS=
# while [ "x${STATUS}" != "xdone" ]
# do
#     STATUS=$(curl -sS -w '\n' -u ${CB_CREDS} http://${CB_HOST}:8091/pools/default/tasks | \
#         ruby -rjson -rpp -e '
#             tasks = JSON.load(STDIN.read)
#             puts "done" if tasks.select {|t| t["type"] == "rebalance" }
#                                 .all? {|t| t["status"] == "completed" || t["status"] == "notRunning" }
#         ')
#     sleep 5
# done

curl --trace - --trace-time -sS -u${CB_CREDS} http://${CB_HOST}:8093/query/service \
     -d "statement=CREATE PRIMARY INDEX ON ${CB_BUCKET} USING GSI" \
     -d "timeout=300s"
sleep 30
curl --trace - --trace-time -sS -u${CB_CREDS} http://${CB_HOST}:8093/query/service \
     -d "statement=SELECT COUNT(*) FROM ${CB_BUCKET}"

curl -sS -w "\n" -u${CB_CREDS} http://${CB_HOST}:8091/pools/default/buckets/${CB_BUCKET}

export COUCHBASE_BACKEND_LOG_LEVEL=debug
# CB_TEST_NAME=test_collection_retry

if [ ! -z $CB_TEST_NAME ]
then
  export TESTOPTS="--name='/^${CB_TEST_NAME}$/'"
fi
export TEST_SERVER_VERSION=${CB_VERSION}
export TEST_CONNECTION_STRING=$(cbdyncluster connstr ${CLUSTER_ID})
set +e

cat /proc/sys/kernel/core_pattern
echo "${PWD}/core.%h.%e.%t" | sudo tee /proc/sys/kernel/core_pattern
ulimit -c unlimited

if [ ! -z "$1" ]
then
  export GEM_HOME="${PROJECT_ROOT}/vendor/bundle/ruby/$(ruby -rrbconfig -e'puts RbConfig::CONFIG["ruby_version"]')"
  gem install $1
  gem list --all
  version=$(ruby -r couchbase/version -e "puts Couchbase::VERSION[:sdk]")
  sed -i "s/^gemspec$/gem 'couchbase', '${version}'/" Gemfile
else
  sed -i "s/^gemspec$/gem 'couchbase'/" Gemfile
fi

bundle config set --local path "${PROJECT_ROOT}/vendor/bundle"
bundle install

cat <<EOF > Rakefile
require "rake/testtask"

Rake::TestTask.new(:test) do |t|
  t.libs << "test"
  t.test_files = FileList["test/**/*_test.rb"]
end
EOF

bundle exec ruby -rcouchbase -e 'pp Couchbase::VERSION'
bundle exec ruby -rcouchbase -e 'pp Couchbase::BUILD_INFO'

bundle exec rake test
STATUS=$?
set -e

if [ "x${STATUS}" = "x0" ]
then
    cbdyncluster rm ${CLUSTER_ID}
    cbdyncluster ps -a
else
    date
    for i in "${PWD}/core*" /tmp/core.*
    do
       if [ -f $i ]
       then
         echo $i
         ls -l $i
         file $i
         gdb $(which ruby) $i --batch -ex "thread apply all bt"
         rm $i || true
       fi
    done
    mkdir server_logs
    for ip in $(cbdyncluster ips ${CLUSTER_ID} | ruby -e 'puts STDIN.read.split(",").join(" ")')
    do
      curl -sS -u${CB_CREDS} http://${ip}:8091/diag > "server_logs/${ip}-diag.log" || true
      curl -sS -u${CB_CREDS} http://${ip}:8091/sasl_logs/debug > "server_logs/${ip}-debug.log" || true
      curl -sS -u${CB_CREDS} http://${ip}:8091/sasl_logs/error > "server_logs/${ip}-error.log" || true
      curl -sS -u${CB_CREDS} http://${ip}:8091/sasl_logs/fts > "server_logs/${ip}-fts.log" || true
      curl -sS -u${CB_CREDS} http://${ip}:8091/sasl_logs/query > "server_logs/${ip}-query.log" || true
    done
    tar cvf server_logs.tar server_logs || true
    gzip -9 server_logs.tar || true
    cbdyncluster rm ${CLUSTER_ID}
fi

exit ${STATUS}
